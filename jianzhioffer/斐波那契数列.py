# 递归算法：
#
# 优点：代码简洁、清晰，并且容易验证正确性。
#
# 缺点：
# 1、它的运行需要较多次数的函数调用，如果调用层数比较深，每次都要创建新的变量，需要增加额外的堆栈处理，会对执行效率有一定影响，占用过多的内存资源。
# 2、递归算法解题的运行效率较低。在递归调用的过程中系统为每一层的返回点、局部变量等开辟了栈来储存。递归次数过多容易造成栈溢出等
#
# 注意：递归就是在过程或函数里调用自身；使用递归策略时要注意的几个条件
# 1、必须有一个明确的递归结束条件，称为递归出口。
# 2、递归需要有边界条件、递归前进段和递归返回段。
# 3、当边界条件不满足时，递归前进。当边界条件满足时，递归返回。
#
# 循环算法：
#
# 优点：速度快，结构简单。
#
# 缺点：并不能解决所有的问题。有的问题适合使用递归而不是循环。如果使用循环并不困难的话，最好使用循环



def Fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    return Fibonacci(n - 1) + Fibonacci(n - 2)


# 循环推荐使用
def fibonacci(n):
    if n <= 1:
        return n
    small = 0
    big = 1
    for i in range(2, n + 1):
        sum = big + small
        small = big
        big = sum
    return big


for i in range(1, 5):
    print(fibonacci(i))
